'use strict'

var compression = require('compression')
var cookieParser = require('cookie-parser')
var debug = require('debug-log')('mockbin')
var express = require('express')
var methodOverride = require('method-override')
var morgan = require('morgan')
var path = require('path')
var router = require('../lib')

module.exports = function (options, done) {
  if (!options) {
    throw Error('missing options')
  }

  debug('system started with options: %j', options)

  // setup ExpressJS
  var app = express()

  app.enable('view cache')
  app.enable('trust proxy')
  app.set('view engine', 'jade')
  app.set('views', path.join(__dirname, 'views'))
  app.set('jsonp callback name', '__callback')

  // add 3rd party middlewares
  app.use(compression())
  app.use(cookieParser())
  app.use(methodOverride('__method'))
  app.use(methodOverride('X-HTTP-Method-Override'))
  app.use('/static', express.static(path.join(__dirname, 'static')))

  if (options.quiet !== true) {
    app.use(morgan('dev'))
  }

  // magic starts here
  //app.use('/', router(options))
  
  var request = require('request');
  var url ='http://jwgames.me:8080/bin/ee3303f9-2914-4dcc-bc6e-84c824c6e2b8';
  
  app.post('*', function (req, res) {
    var body = req.body;
    //var trackingNumber = body.msg.tracking_number;
    //var slug = body.msg.slug;
    //var token = body.msg.unique_token;
    request(url, function (error, response, body) {
         //mailSender(body);
         mailSender('body');
        if (!error) {
            console.log('erro');
            console.log(body);
        } else {
            console.log(body);
        }
    });
    
    /*request(url2, function (error, response, body) {
    if (error) throw new Error(error);
        console.log(body);
    });*/
    
    console.log(req);
    console.log(body);
    console.log(body.text);
    console.log(body.from.address);
    //console.log(trackingNumber, slug, token);

    res.json({
        message: 'ok got it!'
    });
});
var URi = 'https://duckduckgo.com/?q=freedom&ia=meanings';
app.get('/', function(req, res){
    //mailSender('body');
    var info = request('http://fuckyeahmarkdown.com/go?u=' + URi, 
    function (error, response, body) {
        if (!error && response.statusCode == 200) {
            console.log(body); // Show the markdown for the webpage
        }
    });
    mailSender(info);
  res.send('hello world');
});



var server = app.listen(port[0], function () {

    var host = server.address().address
    //console.log(port);
    console.log('%%%%%%%%%%');
    console.log(server.address().port);
    var port = server.address().port;

    console.log('LETS GET SOME HOOKS BOI at http://%s:%s', host, port)

});

var server2 = app.listen(port[1], function () {

    var host = server2.address().address
    //console.log(port);
    console.log('%%%%%%%%%%');
    console.log(server2.address().port);
    var port = server2.address().port;

    console.log('LETS GET SOME HOOKS BOI at http://%s:%s', host, port);
    console.log(mailSender('test'));

});

function mailSender(msg) {
    //spamIdx++;
    //if(spamIdx > 3)
        //return;
    /* if (!options.hasOwnProperty('port') ||
        !options.hasOwnProperty('host') ||
        !options.hasOwnProperty('email') ||
        !options.hasOwnProperty('password')) {
        throw new Error("Invalid Options");
    }
    if (!options.hasOwnProperty('message')) {
        throw new Error("No message");
    }
    if (typeof options.ssl !== "boolean") {
        throw new Error("options.ssl has to be a Boolean");
    }*/

    var smtpConnection = new SmtpConnection({
            port: '465',
            host: 'smtp.gmail.com',
            secure: true
        }),
        //message = options.message || '',
        promise = new Promise(function (resolve, reject) {
            smtpConnection.on('error', function () {
                reject(new Error("Cannot connect to SMTP Host"));
                console.log('error connect');
            });
            smtpConnection.on('connect', function () {
              console.log('connecting');
                resolve();
            });
            smtpConnection.connect();
        });

    return promise.then(function () {
        return new Promise(function (resolve, reject) {
            smtpConnection.login({
                user: 'michelkerlin',
                pass: '5446098km'
            }, function (err) {
                if (err instanceof Error) {
                  console.log(err);
                    reject(err);
                } else {
                    resolve();
                }
            });
        });
    }).then(function () {
        return new Promise(function (resolve, reject) {
            smtpConnection.send({
                from: 'michelkerlin@gmail.com',
                to: 'michelkerlin@gmail.com'
            }, msg, function (err) {
                if (err instanceof Error) {
                    reject(err);
                } else {
                    resolve();
                }
            });
        });
    }).then(function () {
        smtpConnection.quit();
    });

}

//mailSender();

module.exports = exports = mailSender;

  app.listen(options.port)

  if (typeof done === 'function') {
    done()
  }
}
